# {{{ General config

# use C-Space as prefix, much more convenient than C-b
set-option -g prefix C-Space
bind-key C-Space last-window

# xterm's modified keys such as <C-S-V> are understood
set-option -g xterm-keys on

set -g default-shell "/bin/zsh"
# set -g default-command $SHELL

# Start numbering at 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# Highlight active window
set-window-option -g window-status-current-style bg=red

# Vi copypaste mode
set-window-option -g mode-keys vi
bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "xsel -i --clipboard"
bind C-p run "xsel -o --clipboard | tmux load-buffer - ; tmux paste-buffer"

# auto window rename
setw -g automatic-rename on

# rm mouse mode fail
set -g mouse on

# }}}
# {{{ pane traversal & vim integration

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l


# }}}
# {{{ bindings

# restore clear screen (<prefix> <C-l>)
bind C-l send-keys 'C-l'

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# new session opened in current path
bind-key c new-window -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -c "#{pane_current_path}"

# }}}
# {{{ status line
status_left="#[fg=green]#H #[fg=black]â€¢ #[fg=green,bright]#(uname -r | cut -c 1-6)#[default]"
status_right="#[fg=white,bold,bg=default]%k:%M:%S #[default] #[fg=blue]%a %d-%m-%Y"
set -g status-interval 1
set -g status-justify centre # center align window list
set -g status-left-length 20
set -g status-right-length 140
set -g status-left "$status_left"
set -g status-right "$status_right"
#set -g status-right '#[fg=green,bg=default,bright]#(tmux-mem-cpu-load 1) #[fg=red,dim,bg=default]#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") #[fg=white,bg=default]%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d'
# }}}


# {{{ colors

# color
set -g default-terminal tmux-256color
source ~/.tmuxcolors-base16.conf
# }}}
# F12 binding for nested sessions on ssh {{{

# bind -T root F12  \
# set prefix None \;\
# set key-table off \;\
# set status-style "bg=colour19" \;\
# set window-status-current-style "fg=$color_dark,bold,bg=red" \;\
# if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
# refresh-client -S \;\

# bind -T off F12 \
# set -u prefix \;\
# set -u key-table \;\
# set -u status-style \;\
# set -u window-status-current-style \;\
# set -u window-status-current-format \;\
# refresh-client -S

# wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"
# set -g status-right "$wg_is_keys_off $status_right"
# }}}

# vi: fdm=marker
